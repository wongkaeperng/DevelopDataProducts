find.package ("ggplot2")
library(ggplot2)
find_rtools()
clear
exit
quit
findfind.package ("ggplot2")
find.package ("ggplot2")
install.package ("knitr")
package.install ("knitr")
install.packages ("knitr")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <-5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste (my_char,collapse= " ")
my_name <- c(my_char, "Jacky")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X"
,"Y","Z"),sep="")
paste(LETTERS,1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y,z),100)
myNA = is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x<0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
?matrix
myMatrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(matrix,myMatrix2)
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(vector,myMatrix)
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <- cnames
myData
q()
library(datasets)
data(iris)
?iris
iris
iris[,Sepal.Length]
iris[Sepal.Length]
iris[Sepal.Length,]
iris[,"Sepal.Length"]
mean(iris[,"Sepal.Length"])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364-15.1
abs(26.66364-15.1)
?abs
abs(10.1-10)
debug(ls)
ls
iris
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(26.66364-15.10000)
abs(15.10000-26.66364)
abs(mean(mtcars[mtcars$cyl == 4, "hp"])-mean(mtcars[mtcars$cyl == 8, "hp"]))
tapply(mtcars$hp, mtcars$cyl, mean)
abs(209.21429-82.63636)
with(mtcars, tapply(mpg, cyl, mean))
q()
q()
objects()
ls()
q()
q()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
library(RMySQL)
q()
INSTALL.PACKAGES(“RMySQL”,type=”Sources”)
install.packages("RMySQL",type="Sources")
sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages('RMySQL',type='source')
library('RMySQL')
install.packages('RMySQL',type='source')
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?print.trellis
?par
?trellis.par.set?
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?geom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
q()
q()
q()
install.packages("knitr")
q()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x);
summary(fit)$coefficients
summary(fit)$sigma
data(mtcars)
head(mtcars)
y <- mtcars$mpg; x<-mtcars$wt; n<-length(y)
fit <- lm(y~x)
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit$df) * sumCoef[2,2]
?mtcars
coef(fit)[1]+coef(fit)[2]*3000
coef(fit)[1]+coef(fit)[2]*3
mydata <- data.frame(y,x)
head(mydata)
fit2 <- lm(y~I(x*2)),data=mydata)
fit2 <- lm(y~I(x*2),data=mydata)
coef(fit2)
sumCoef <- summary(fit2)$coefficients
sumCoef
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit$df) * sumCoef[2,2]
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit2$df) * sumCoef[2,2]
fit3 <- lm(y~I(x*0.5),data=mydata)
coef(fit3)
sumCoef <- summary(fit3)$coefficients
sumCoef
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit3$df) * sumCoef[2,2]
> y <- mtcars$mpg; x<-mtcars$wt; n<-length(y)
y <- mtcars$mpg; x<-mtcars$wt; n<-length(y)
fit <- lm(y~x)
e <- resid(fit)
e
yhat <- predict(fit)
yhat
max(abs(e-(y-coef(fit)[1]-coef(fit)[2]*x)))
z <- max(abs(e-(y-coef(fit)[1]-coef(fit)[2]*x)))
zz <- max(abs(e-(y-coef(fit)[1])))
zz
z/zz
data(mtcars)
head(mtcars)
y <- mtcars$mpg; x<-mtcars$wt; n<-length(y)
fit <- lm(y~x)
?mean
mean(x)
coef(fit)[1]+coef(fit)[2]*3.21725
q()
library(e1071)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmFit <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(svmFit,testing)
accuracy(svmPred, testing$CompressiveStrength)
library(forecast)
install.packages(forecast)
confusionMatrix(testing$CompressiveStrength,svmPred)
svmPred
library(caret)
accuracy(svmPred, testing$CompressiveStrength)
library(lubridate)
install.packages("lubridate")
library(forecast)
install.packages(forecast)
q()
q()
setwd("C:\\DataScience_Courses\\WorkingDirectory\\salary2")
